// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalonAppointment.Server.Data;

#nullable disable

namespace SalonAppointment.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240514030303_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SalonAppointment.Server.Models.Appointment", b =>
                {
                    b.Property<Guid>("CodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Observation")
                        .HasColumnType("longtext");

                    b.HasKey("CodeId");

                    b.HasIndex("ClientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("SalonAppointment.Server.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("SalonAppointment.Server.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AppointmentCodeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("decimal(12,8)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentCodeId");

                    b.HasIndex("ClientId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SalonAppointment.Server.Models.Appointment", b =>
                {
                    b.HasOne("SalonAppointment.Server.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("SalonAppointment.Server.Models.Service", b =>
                {
                    b.HasOne("SalonAppointment.Server.Models.Appointment", null)
                        .WithMany("Service")
                        .HasForeignKey("AppointmentCodeId");

                    b.HasOne("SalonAppointment.Server.Models.Client", null)
                        .WithMany("ServicesList")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("SalonAppointment.Server.Models.Appointment", b =>
                {
                    b.Navigation("Service");
                });

            modelBuilder.Entity("SalonAppointment.Server.Models.Client", b =>
                {
                    b.Navigation("ServicesList");
                });
#pragma warning restore 612, 618
        }
    }
}
